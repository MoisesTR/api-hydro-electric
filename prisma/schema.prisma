// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  userName  String    @unique
  firstName String
  lastName  String
  password  String    @db.VarChar(25)
  enabled   Boolean   @default(false)
  roles     Rol[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Rol {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  enabled     Boolean
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

}

enum UnitWork {
  UNIDAD1
  UNIDAD2
  PHSM
}

model PressureMeter {
  id                 Int       @id @default(autoincrement())
  unitWork           UnitWork
  measurementDate    DateTime  @default(now())
  forcedPipeline     Int
  spiralBox          Int
  difusserTube       Float
  pressTurboDS       Float
  beforeFilter       Float
  afterFilter        Float
  inBearDSRad        Float
  outBearDSRad       Float
  waterPressureSeal  Float
  WaterFlowSeal      Float
  systemPressure     Int
  servoMotorPressure Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
}

enum Rectifier {
  rectifier1
}

model AuxiliaryService {
  id               Int                   @id @default(autoincrement())
  registerDate     DateTime?
  voltageBar       Float
  rectifier        Rectifier
  unitWork         UnitWork
  levelBeforeGrill Float
  levelAfterGrill  Float
  fisicLevel       Float
  auxiliaries      AuxiliaryServiceDet[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime?             @updatedAt
}

model AuxiliaryServiceDet {
  id                 Int              @id @default(autoincrement())
  voltageV           Float
  voltageA           Float
  openingLimiter     Float
  activePotency      Float
  reactivePotency    Float
  auxiliaryService   AuxiliaryService @relation(fields: [auxiliaryServiceId], references: [id])
  auxiliaryServiceId Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime?        @updatedAt
}

model MaximunMinimunDemand {
  id                Int       @id @default(autoincrement())
  unitWork          UnitWork
  registerDate      DateTime
  maximunDemand     Float
  maximunDemandHour Int       @db.SmallInt
  minimunDemand     Float
  minimunDemandHour Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
}

model CorrectiveMeasure {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model TriggerReason {
  id          Int       @id @default(autoincrement())
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model HydraulicMeasumerent {
  id                  Int       @id @default(autoincrement())
  description         String
  measumerentDate     DateTime
  pluviometerHour     DateTime  @db.Time(6)
  valuePluviometer    Float
  reservoirLevelHour  DateTime  @db.Time(6)
  reservoirLevelValue Float
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
}
